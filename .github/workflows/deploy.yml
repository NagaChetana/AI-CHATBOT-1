name: CI Build & Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend-express
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:${{ github.sha }}

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            cd ~/chatbot-deploy || mkdir -p ~/chatbot-deploy && cd ~/chatbot-deploy
            # pull latest compose file (optional) and ensure images are updated
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest || true
            # bring up services (assumes docker-compose.deploy.yml is present on server)
            docker compose -f docker-compose.deploy.yml pull || true
            docker compose -f docker-compose.deploy.yml up -d --remove-orphans
            docker image prune -f || true
